{"version":3,"sources":["app.js","environment.js","home.js","main.js","services/fixtures.js","services/messages.js","services/tweet-service.js","resources/index.js","viewmodels/dashboard/dashboard.js","viewmodels/login/login.js","viewmodels/friends/friends.js","viewmodels/logout/logout.js","viewmodels/stats/stats.js","viewmodels/signup/signup.js","viewmodels/timeline/timeline.js","viewmodels/tweet/tweet.js","c:/dev/webdev/mytweet-client/src/app.html","c:/dev/webdev/mytweet-client/src/home.html","c:/dev/webdev/mytweet-client/src/nav-bar.html","c:/dev/webdev/mytweet-client/src/viewmodels/dashboard/dashboard.html","c:/dev/webdev/mytweet-client/src/viewmodels/friends/friends.html","c:/dev/webdev/mytweet-client/src/viewmodels/login/login.html","c:/dev/webdev/mytweet-client/src/viewmodels/logout/logout.html","c:/dev/webdev/mytweet-client/src/viewmodels/timeline/timeline.html","c:/dev/webdev/mytweet-client/src/viewmodels/signup/signup.html","c:/dev/webdev/mytweet-client/src/viewmodels/tweet/tweet.html","c:/dev/webdev/mytweet-client/src/viewmodels/stats/stats.html"],"names":["App","au","ea","subscribe","msg","status","success","setRoot","then","router","navigateToRoute","configureRouter","config","map","route","name","moduleId","nav","title","debug","testing","Home","aurelia","configure","Promise","longStackTraces","warnings","wForgottenReturn","use","standardConfiguration","feature","developmentLogging","plugin","start","Fixtures","users","firstName","lastName","email","password","tweets","PostsUpdate","posts","LoginStatus","TweetService","data","loggedInUser","posttweet","sender","text","tweet","push","parseInt","length","console","log","publish","addFriend","selectedFriend","friend","register","newUser","login","message","logout","Dashboard","Login","ts","tweetService","prompt","e","Friend","membersTweet","forEach","indexOf","Logout","Stats","attached","Signup","registered","Timeline","Tweet","createTweet"],"mappings":"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","file":"app-bundle.js","sourcesContent":["import {inject, Aurelia} from 'aurelia-framework';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {LoginStatus} from './services/messages';\n\n@inject(Aurelia, EventAggregator)\nexport class App {\n\n  constructor(au, ea) {\n    ea.subscribe(LoginStatus, msg => {\n      if (msg.status.success === true) {\n        au.setRoot('home').then(() => {\n          this.router.navigateToRoute('tweet');\n        });\n      } else {\n        au.setRoot('app').then(() => {\n          this.router.navigateToRoute('login');\n        });\n      }\n    });\n  }\n\n  configureRouter(config, router) {\n    config.map([\n      { route: ['', 'login'], name: 'login', moduleId: 'viewmodels/login/login', nav: true, title: 'Login' },\n      { route: 'signup', name: 'signup', moduleId: 'viewmodels/signup/signup', nav: true, title: 'Signup' }\n    ]);\n    this.router = router;\n  }\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","import { inject, Aurelia } from 'aurelia-framework';\r\n\r\n@inject(Aurelia)\r\nexport class Home {\r\n\r\n  constructor(au) {\r\n    this.aurelia = au;\r\n  }\r\n\r\n  configureRouter(config, router) {\r\n    config.map([\r\n      { route: ['', 'home'], name: 'tweet', moduleId: 'viewmodels/tweet/tweet', nav: true, title: 'Tweet' },\r\n      { route: 'timeline', name: 'timeline', moduleId: 'viewmodels/timeline/timeline', nav: true, title: 'Timeline' },\r\n      { route: 'friends', name: 'friends', moduleId: 'viewmodels/friends/friends', nav: true, title: 'Users' },\r\n      { route: 'stats', name: 'stats', moduleId: 'viewmodels/stats/stats', nav: true, title: 'Stats' },\r\n      { route: 'dashboard', name: 'dashboard', moduleId: 'viewmodels/dashboard/dashboard', nav: true, title: 'Dashboard' },\r\n      { route: 'logout', name: 'logout', moduleId: 'viewmodels/logout/logout', nav: true, title: 'Logout' }\r\n    ]);\r\n    this.router = router;\r\n  }\r\n}\r\n","import environment from './environment';\n\n//Configure Bluebird Promises.\nPromise.config({\n  longStackTraces: environment.debug,\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","export default class Fixtures {\r\n\r\n  users = {\r\n    'homer@simpson.com': {\r\n      firstName: 'Homer',\r\n      lastName: 'Simpson',\r\n      email: 'homer@simpson.com',\r\n      password: 'secret'\r\n    },\r\n    'marge@simpson.com': {\r\n      firstName: 'Marge',\r\n      lastName: 'Simpson',\r\n      email: 'marge@simpson.com',\r\n      password: 'secret'\r\n    },\r\n    'bart@simpson.com': {\r\n      firstName: 'Bart',\r\n      lastName: 'Simpson',\r\n      email: 'bart@simpson.com',\r\n      password: 'secret'\r\n    },\r\n    'lisa@simpson.com': {\r\n      firstName: 'Lisa',\r\n      lastName: 'Simpson',\r\n      email: 'lisa@simpson.com',\r\n      password: 'secret'\r\n    }\r\n  }\r\n\r\n  tweets = [];\r\n}\r\n","export class PostsUpdate {\r\n  constructor(posts) {\r\n    this.posts = posts;\r\n  }\r\n}\r\n\r\nexport class LoginStatus {\r\n  constructor(status) {\r\n    this.status = status;\r\n  }\r\n}\r\n","import {inject} from 'aurelia-framework';\r\nimport Fixtures from './fixtures';\r\nimport {PostsUpdate, LoginStatus} from './messages';\r\nimport {EventAggregator} from 'aurelia-event-aggregator';\r\n\r\n@inject(Fixtures, EventAggregator)\r\nexport default class TweetService {\r\n\r\n  tweets = [];\r\n  users = [];\r\n  posts = 0;\r\n  loggedInUser = [];\r\n\r\n  constructor(data, ea) {\r\n    this.tweets = data.tweets;\r\n    this.users = data.users;\r\n    this.ea = ea;\r\n  }\r\n\r\n  //compose tweet handler\r\n  posttweet(sender, text) {\r\n    if (( sender && sender !== null) && ( text && text !== null)) {\r\n      const tweet = {\r\n        sender: sender,\r\n        text: text\r\n      };\r\n      this.tweets.push(tweet);\r\n      this.posts = parseInt(this.tweets.length, 10);\r\n      console.log(sender.firstName + ' tweeted: ' + text);\r\n      console.log('Total tweets: ' + this.tweets.length);\r\n      this.ea.publish(new PostsUpdate(this.posts));\r\n    } else {\r\n      console.log('Message body can\\'t be empty! Sender name can\\'t be blank');\r\n      console.log('Total tweets: ' + this.tweets.length);\r\n    }\r\n  }\r\n\r\n  //follow a user\r\n  addFriend(selectedFriend) {\r\n    const friend = {\r\n      firstName: selectedFriend.firstName,\r\n      lastName: selectedFriend.lastName\r\n    };\r\n    console.log('Following: ' + friend.firstName + ' ' + friend.lastName);\r\n  }\r\n\r\n  //registering new user\r\n  register(firstName, lastName, email, password) {\r\n    const newUser = {\r\n      firstName: firstName,\r\n      lastName: lastName,\r\n      email: email,\r\n      password: password\r\n    };\r\n    this.users[email] = newUser;\r\n    this.firstName = '';\r\n    this.lastName = '';\r\n    this.email = '';\r\n    this.password = '';\r\n  }\r\n\r\n  //user authenticate handler\r\n  login(email, password) {\r\n    const status = {\r\n      success: false,\r\n      message: ''\r\n    };\r\n\r\n    if (this.users[email]) {\r\n      if (this.users[email].password === password) {\r\n        status.success = true;\r\n        status.message = 'logged in';\r\n        this.loggedInUser = this.users[email];\r\n      } else {\r\n        status.message = 'Incorrect password';\r\n      }\r\n    } else {\r\n      status.message = 'Unknown user';\r\n    }\r\n\r\n    this.ea.publish(new LoginStatus(status));\r\n  }\r\n\r\n  //log out function\r\n  logout() {\r\n    const status = {\r\n      success: false,\r\n      message: ''\r\n    };\r\n    this.ea.publish(new LoginStatus(new LoginStatus(status)));\r\n  }\r\n}\r\n","export function configure(config) {\n  //config.globalResources([]);\n}\n","export class Dashboard {\r\n}","import {inject} from 'aurelia-framework';\r\nimport TweetService from '../../services/tweet-service';\r\n\r\n@inject(TweetService)\r\nexport class Login {\r\n\r\n /* email = 'marge@simpson.com';\r\n  password = 'secret';*/\r\n\r\n  constructor(ts) {\r\n    this.tweetService = ts;\r\n    this.prompt = '';\r\n  }\r\n\r\n  login(e) {\r\n    console.log(`Trying to log in ${this.email}`);\r\n    this.tweetService.login(this.email, this.password);\r\n  }\r\n}\r\n","import {inject} from 'aurelia-framework';\r\nimport TweetService from '../../services/tweet-service';\r\n\r\n@inject(TweetService)\r\nexport class Friend {\r\n\r\n  tweets = [];\r\n\r\n  constructor(ts) {\r\n    this.tweetService = ts;\r\n    this.tweets = ts.tweets;\r\n    let membersTweet = [];\r\n\r\n    this.tweets.forEach(tweet => {\r\n      if (membersTweet.indexOf(tweet) === -1) {\r\n        membersTweet.push(tweet);\r\n      }\r\n      return membersTweet;\r\n    });\r\n  }\r\n}\r\n  /*addFriend() {\r\n   this.tweetService.addFriend(this.selectedFriend);\r\n   }*/\r\n","import TweetService from '../../services/tweet-service';\r\nimport {inject} from 'aurelia-framework';\r\n\r\n@inject(TweetService)\r\nexport class Logout {\r\n\r\n  constructor(tweetService) {\r\n    this.tweetService = tweetService;\r\n  }\r\n\r\n  logout() {\r\n    console.log('logging out');\r\n    this.tweetService.logout();\r\n  }\r\n}\r\n","import {inject} from 'aurelia-framework';\r\nimport {PostsUpdate} from '../../services/messages';\r\nimport {EventAggregator} from 'aurelia-event-aggregator';\r\nimport TweetService from '../../services/tweet-service';\r\n\r\n\r\n@inject(EventAggregator, TweetService)\r\nexport class Stats {\r\n\r\n  posts = 0;\r\n\r\n  constructor(ea, ts) {\r\n    this.ts = ts;\r\n    ea.subscribe(PostsUpdate, msg => {\r\n      this.posts = msg.posts;\r\n    });\r\n  }\r\n\r\n  attached() {\r\n    this.posts = this.ts.posts;\r\n  }\r\n}\r\n","import {inject} from 'aurelia-framework';\r\nimport TweetService from '../../services/tweet-service';\r\n\r\n@inject(TweetService)\r\nexport class Signup {\r\n\r\n  firstName = 'Marge';\r\n  lastName = 'Simpson';\r\n  email = 'marge@simpson.com';\r\n  password = 'secret';\r\n\r\n  constructor(ts) {\r\n    this.tweetService = ts;\r\n  }\r\n\r\n  register(e) {\r\n    this.registered = true;\r\n    this.tweetService.register(this.firstName, this.lastName, this.email, this.password);\r\n    this.tweetService.login(this.email, this.password);\r\n  }\r\n}\r\n","import {inject} from 'aurelia-framework';\r\nimport TweetService from '../../services/tweet-service';\r\n\r\n@inject(TweetService)\r\nexport class Timeline {\r\n\r\n  tweets = [];\r\n\r\n  constructor(ts) {\r\n    this.tweetService = ts;\r\n    this.tweets = ts.tweets;\r\n  }\r\n}\r\n","import {inject} from 'aurelia-framework';\r\nimport TweetService from '../../services/tweet-service';\r\n\r\n@inject(TweetService)\r\nexport class Tweet {\r\n\r\n  text = '';\r\n  sender = [];\r\n\r\n  constructor(ts) {\r\n    this.tweetService = ts;\r\n    this.sender = ts.loggedInUser;\r\n  }\r\n\r\n  createTweet() {\r\n    this.tweetService.posttweet(this.sender, this.text);\r\n    this.text = '';\r\n  }\r\n}\r\n",null,null,null,null,null,null,null,null,null,null,null],"sourceRoot":"../src"}